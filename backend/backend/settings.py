"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url
from dotenv import load_dotenv
from urllib.parse import urlparse

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env if present
load_dotenv(BASE_DIR / '.env')


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'dev-secret-key')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'True').lower() == 'true'

# Hosts: prefer explicit env; otherwise derive safe defaults for Render
allowed_hosts_env = os.getenv('ALLOWED_HOSTS')
if allowed_hosts_env:
    ALLOWED_HOSTS = [h.strip() for h in allowed_hosts_env.split(',') if h.strip()]
else:
    hosts: list[str] = []
    # Render typically provides RENDER_EXTERNAL_URL or RENDER_EXTERNAL_HOSTNAME
    render_url = os.getenv('RENDER_EXTERNAL_URL')
    render_host = os.getenv('RENDER_EXTERNAL_HOSTNAME')
    if render_url:
        try:
            parsed = urlparse(render_url)
            if parsed.hostname:
                hosts.append(parsed.hostname)
        except Exception:
            pass
    if render_host:
        hosts.append(render_host)
    # Local dev
    hosts.extend(['localhost', '127.0.0.1'])
    # Allow any Render subdomain as a fallback
    hosts.append('.onrender.com')
    ALLOWED_HOSTS = hosts


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'donationapp',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',  # for cross-origin requests
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
    ],
}

AUTH_USER_MODEL = 'donationapp.CustomUser'

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
"""CORS configuration
Priority order:
1) If CORS_ALLOWED_ORIGINS provided, use it and disable allow-all.
2) Else respect CORS_ALLOW_ALL_ORIGINS (or legacy CORS_ALLOW_ALL) env flag.
"""
# Read modern flag first, fall back to legacy env for backwards-compat
cors_allow_all_flag = os.getenv('CORS_ALLOW_ALL_ORIGINS', os.getenv('CORS_ALLOW_ALL', 'True'))
CORS_ALLOW_ALL_ORIGINS = str(cors_allow_all_flag).lower() == 'true'

cors_origins = os.getenv('CORS_ALLOWED_ORIGINS')
if cors_origins:
    CORS_ALLOW_ALL_ORIGINS = False
    CORS_ALLOWED_ORIGINS = [o.strip() for o in cors_origins.split(',') if o.strip()]
ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'donation_db',
        'USER': 'urich',
        'PASSWORD': 'urich123',
        'HOST': 'localhost',
        'PORT': '5432',
        'OPTIONS': {
            'client_encoding': 'UTF8',
        },
    }
}

# Override with DATABASE_URL if provided (e.g., Supabase connection string)
DATABASE_URL = os.getenv('DATABASE_URL')
if DATABASE_URL:
    DATABASES['default'] = dj_database_url.parse(
        DATABASE_URL,
        conn_max_age=600,
        ssl_require=True,
    )


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STORAGES = {
    'staticfiles': {
        'BACKEND': 'whitenoise.storage.CompressedManifestStaticFilesStorage',
    },
}

# Trust Render/other origins for CSRF
csrf_trusted = os.getenv('CSRF_TRUSTED_ORIGINS')
if csrf_trusted:
    CSRF_TRUSTED_ORIGINS = [o.strip() for o in csrf_trusted.split(',') if o.strip()]
else:
    csrf_origins: list[str] = []
    # Add origin derived from RENDER_EXTERNAL_URL
    render_url = os.getenv('RENDER_EXTERNAL_URL')
    if render_url:
        try:
            parsed = urlparse(render_url)
            if parsed.scheme and parsed.hostname:
                csrf_origins.append(f"{parsed.scheme}://{parsed.hostname}")
        except Exception:
            pass
    # Optional FRONTEND_URL override (explicit origin, with scheme)
    frontend_url = os.getenv('FRONTEND_URL')
    if frontend_url:
        try:
            p = urlparse(frontend_url)
            if p.scheme and p.hostname:
                csrf_origins.append(f"{p.scheme}://{p.hostname}")
        except Exception:
            pass
    # Allow any Render subdomain as a safe default for CSRF
    csrf_origins.append('https://*.onrender.com')
    CSRF_TRUSTED_ORIGINS = list(dict.fromkeys(csrf_origins))  # dedupe, preserve order

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
